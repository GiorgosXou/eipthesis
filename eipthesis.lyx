#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\DeclareMathSizes{10}{12}{7}{5}
\usepackage{url}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\begin_inset Graphics
	filename assets/logo.png

\end_inset


\begin_inset Newline newline
\end_inset

Enterprise Integration Patterns
\begin_inset Newline newline
\end_inset

Building message-oriented middleware with Apache Camel
\end_layout

\begin_layout Author
Odysseas Neslechanidis
\begin_inset Newline newline
\end_inset

Supervisor: Christos Gkogkos
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Address
\align center
Graduation Thesis
\end_layout

\begin_layout Address
\align center
University of Ioannina
\begin_inset Newline newline
\end_inset

Department of Informatics and Telecommunications
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Abstract
The term "Enterprise Integration Patterns (EIPs)" refers to a vocabulary
 of solutions to common problems in the integration of enteprise systems.
 Of such vocabularies pattern languages may be constituted to allow complex
 business flows of diverse form to be described and handled in a uniform
 way.
 
\end_layout

\begin_layout Abstract
Apache Camel is a framework that implements EIPs around a common interface
 based on Java Message Objects.
 Camel also provides an IDE-friendly declarative Domain Specific Language
 (DSL) oriented around this interface, which enables integration flows between
 disparate systems ("Camel routes") to be described neatly as Java Messages
 passed around between chained camel methods.
\end_layout

\begin_layout Abstract
The specifics of the underlying communication protocols (FTP, http, ActiveMessag
eQueue etc) are abstracted away and the flow of information is cleanly described
, leaving such considerations as availability, load balancing, validation,
 security as the primary factors influencing the middleware's architectural
 complexity.
\end_layout

\begin_layout Abstract
In this thesis production deployments of Java Spring middleware utilizing
 Apache Camel will be studied.
 The most commonly used EIPs' Camel implementations will be inspected, and
 a comparison with more established integration tooling will be made when
 convenient, to ascertain the benefits of the Message-Oriented Middleware
 (MOM)-backed Camel DSL approach.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
This thesis was approved by a 3 person examination committee.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Examination Commitee
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
Christos Gkogkos
\end_layout

\begin_layout Enumerate
John Doe
\end_layout

\begin_layout Enumerate
John Smith
\end_layout

\begin_layout Subsection*
Affidavit
\end_layout

\begin_layout Standard
I hereby affirm that this Bachelor’s Thesis represents my own written work
 and that I have used no sources and aids other than those indicated.
 All passages quoted from publications or paraphrased from these sources
 are properly cited and attributed.The thesis was not submitted in the same
 or in a substantially similar version, not even partially, to another examinati
on board and was not published elsewhere.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Signed,
\end_layout

\begin_layout Standard
Neslechanidis Odysseas 
\begin_inset space \hfill{}
\end_inset

All Rights Reserved ©
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Address
\align center
\begin_inset Newpage pagebreak
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Introduction
\end_layout

\begin_layout Itemize
A few words on the problem domain
\end_layout

\begin_layout Itemize
Introduction of the term 
\begin_inset Quotes eld
\end_inset

middleware
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
High level considerations when opting for middleware, approaches and representat
ive technologies.
 Camel is introduced here.
\end_layout

\begin_layout Part
Messaging and Message Oriented middleware
\end_layout

\begin_layout Standard
Examples from Java OOP, JMS messaging, Camel.
\end_layout

\begin_layout Itemize
Common architectural elements of MOM systems (request databases/message
 buffers, aggregators, api consumers, services).
 
\end_layout

\begin_layout Itemize
Intruduction to messaging, key problems it solves (separation of concerns,
 decoupling etc; use analogues from different domains e.g.
 URI barcodes etc) Identifier vs Locator disambiguation
\end_layout

\begin_layout Standard
Message passing implies URLs (Uniform Locator of Resources) Uniform Identifier:
 as in URI: 23-digit barcode form unique id of a thing whose location or
 mode of access is not defined plus Resource Locator: 
\end_layout

\begin_layout Standard
-Locator as in http:// (mode of access) which implies the rest is an address.
 
\end_layout

\begin_layout Standard
-Resource as in shared-nothing, volatile object: Evoke the same operation
 (e.g INSERT) twice, don't expect it to be the same function call because
 the message-passing abstraction hides (therefore isolates) underlying state
 changes.
 
\end_layout

\begin_layout Standard
Eg.
 a necessary rerouting of a request because a node is down does not concern
 the message sender.
 Drawing out the metaphor, URI = class interface, URL = address of volatile
 object 
\end_layout

\begin_layout Itemize
Message buffer considerations: When full: - Block the sender (deadlock risk)
 - Drop future messages (producer-consumer problem; unreliability), Asynchronici
ty and concurrency: gotta have both! + friends
\end_layout

\begin_layout Itemize
Services as components of monoliths vs distributed systems.
 Messaging in OOP vs JMS topic, queue schema.
 Compare and contrast, justify differences by comparing problem domains.
\end_layout

\begin_deeper
\begin_layout Standard
Pros: Shared--nothing, all the loose-coupling stuff 
\end_layout

\begin_layout Standard
Cons: overhead as arguments need to be copied and transmitted to the receiving
 object 
\end_layout

\begin_layout Itemize
https://en.wikipedia.org/wiki/Message_passing#Distributed_objects
\end_layout

\end_deeper
\begin_layout Part
Flow-based programming, declarative DSLs/xml
\end_layout

\begin_layout Standard
Examples from declarative vs procedural DSLs (e.g.
 shell vs guile scripts), Spring traditional remoting vs Camel, timer/from
 components introduced here.
\end_layout

\begin_layout Itemize
Producer, consumer properties per component.
\end_layout

\begin_layout Itemize
Seamless remoting via 
\begin_inset Quotes eld
\end_inset

.to()
\begin_inset Quotes erd
\end_inset

 chaining.
 Direct ProducerTemplate calls.
\end_layout

\begin_layout Itemize
Other flow-based programming advantages.
\end_layout

\begin_layout Itemize
Declarative programming advantages, mention drag-and-drop services (e.g.
 redhat's integration product).
\end_layout

\begin_layout Itemize
Machine readable markup vs the DSL hack.
\end_layout

\begin_layout Part
Camel in Action
\end_layout

\begin_layout Itemize
Server as persistence hub, interacting with client services via library
 calls with 
\begin_inset Quotes eld
\end_inset

direct:
\begin_inset Quotes erd
\end_inset

 route chaining.
\end_layout

\begin_layout Itemize
Split, choice and aggregator branching and joining.
\end_layout

\begin_layout Itemize
Processors vs services, proper use of each.
\end_layout

\begin_layout Standard
Processors are necessarily implementations of the Camel Processor interface.
 Apart from that, services differ from processors in that they are meant
 to be used procedurally, called directly from within other methods, whereas
 processors are integrated in a program’s flow through message-based integration
, which is what Camel is built for.
\end_layout

\begin_layout Standard
This makes services the proper abstraction for program-wide configuration
 injection (e.g.
 PartnerManagementService) and a feasible one for utilities for which there
 is no expected need for integration with remote components (e.g.
 RequestHandlingService).
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

from:
\begin_inset Quotes erd
\end_inset

-driven abstract pollers with different implementations per instance.
 How can Camel help adapt towards a more scalable microservice variant?
\end_layout

\begin_layout Standard
Multiple task scheduling components are available.
 They produce timer events that can be used to trigger recurring camel routes
 via consumer EIPs, or otherwise provide a means of time tracking for local
 or distributed tasks.
 The primary ones are scheduler (or it's simpler variant, timer) and quartz.
 
\end_layout

\begin_layout Standard
The scheduler component utilizes the host jdk's timer and is intended for
 locally tracked tasks that have no need for accuracy, as no provision is
 made against downtime.
\end_layout

\begin_layout Standard
The quartz component uses a database to store timer events and supports
 distributed timers, and is therefore fault tolerant and suitable for scheduling
 distributed tasks.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "references"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
